{
    "atomType": "Molecule",
    "name": "2GT Sprocket",
    "x": 0,
    "y": 0,
    "uniqueID": 869568,
    "ioValues": [
        {
            "name": "Number of teeth",
            "ioValue": 17
        },
        {
            "name": "Resolution",
            "ioValue": 0.1
        }
    ],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Input",
            "name": "Number of teeth",
            "x": 0.013333333333333334,
            "y": 0.4789272030651341,
            "uniqueID": 185465,
            "ioValues": []
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.3924677898909812,
            "y": 0.3984674329501916,
            "uniqueID": 693637,
            "ioValues": [
                {
                    "name": "NumberOfTeeth",
                    "ioValue": 17
                },
                {
                    "name": "Resolution",
                    "ioValue": 0.1
                }
            ],
            "code": "function main(NumberOfTeeth, Resolution){\n  \n  console.log(\"Belt Length: \");\n  return gear(2, parseInt(NumberOfTeeth), parseFloat(Resolution), GT2Tooth);\n}\n\n\n//You can learn more about all of the available methods at https://jsxcad.js.org/app/UserGuide.html \n\n\n//A support function to generate arcs\nfunction arc(x, xOffset, yOffset, radius, sign){\n    if(sign){\n        return yOffset + Math.sqrt(Math.pow(radius, 2) - Math.pow(x - xOffset, 2));\n    }\n    else{\n        return yOffset - Math.sqrt(Math.pow(radius, 2) - Math.pow(x - xOffset, 2));\n    }\n}\n\n//The actual tooth profile\nfunction GT2Tooth(i){\n    \n    //Transition points between sections\n    const T1 = .3;\n    const T2 = .41;\n    const T3 = .48;\n    const TLD = .254;\n    \n    //The little fillet arc on the left\n    if(i>=T1 && i < T2){\n        return arc(i, .26, -.15, .15, true) - TLD;\n    }\n    //The transition arc on the left\n    else if(i>=T2 && i<T3){\n        return arc(i, 1.4, 0, 1, false) - TLD;\n    }\n    //The big arc in the middle\n    else if(i >= T3 && i < 1+(1-T3)){\n        return arc(i, 1, -.2, .555, false) - TLD;\n    }\n    //The transition arc on the right\n    else if(i>= 1+(1-T3) && i<1+(1-T2)){\n        return arc(i, .6, 0, 1, false) - TLD;\n    }\n    //The little fillet arc on the right\n    else if(i>=1+(1-T2) && i < 1+(1-T1)){\n        return arc(i, 1.74, -.15, .15, true) - TLD;\n    }\n    //The flat parts on either side\n    else{\n        return 0 - TLD;\n    }\n}\n\n\n//distanceToAngle take a distance and converts it to an angle for a circle of\n//the passed circumference\nfunction distanceToAngle(distance, C){\n    return 360*(distance/C);\n}\n\n\n//Gear is a function which takes arguments tooth spacing, number of teeth and \n//tooth. Tooth spacing is the length of each tooth, number of teeth is the number \n//of teeth in the gear, and tooth is a tooth profile function.\nfunction gear(toothSpacing, numberOfTeeth, stepSize, toothProfile){\n    \n    //Compute the Circumference of the sprocket and the radius of the sprocket\n    const C = toothSpacing*numberOfTeeth;\n    const R = C / (Math.PI*2);\n    \n    \n    console.log(\"Belt Length: \");\n    console.log(\"R: \" + R - .254);\n    \n    points = [];\n    var radiusNow = R;\n    \n    var distance = 0;\n    while(distance < C){\n       //Compute the radius at this point\n       radiusNow = R + toothProfile(distance%toothSpacing);\n       \n       //Generate the circle\n       points.push([radiusNow*cos(distanceToAngle(distance, C)), radiusNow*sin(distanceToAngle(distance, C)), 0]);\n       distance = distance + stepSize;\n    }\n    \n    return Shape.fromOpenPath(points).close().interior();\n}\n\n\n\n\nreturn main(NumberOfTeeth, Resolution)"
        },
        {
            "atomType": "Input",
            "name": "Resolution",
            "x": 0.013333333333333334,
            "y": 0.7892720306513409,
            "uniqueID": 448894,
            "ioValues": []
        },
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.9853587115666179,
            "y": 0.5,
            "ioValues": []
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "number or geometry",
            "ap2Name": "NumberOfTeeth",
            "ap2Primary": false,
            "ap1ID": 185465,
            "ap2ID": 693637
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": 693637
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "Resolution",
            "ap2Primary": false,
            "ap1ID": 448894,
            "ap2ID": 693637
        }
    ],
    "fileTypeVersion": 1,
    "filetypeVersion": 1,
    "circleSegmentSize": "0.4"
}