{
    "molecules": [
        {
            "atomType": "Molecule",
            "name": "2GT Sprocket",
            "x": 0,
            "y": 0,
            "uniqueID": 869568,
            "ioValues": [
                {
                    "name": "Number of teeth",
                    "ioValue": 10
                },
                {
                    "name": "Resolution",
                    "ioValue": 10
                }
            ],
            "topLevel": true,
            "allAtoms": [
                {
                    "atomType": "Input",
                    "name": "Number of teeth",
                    "x": 30,
                    "y": 84,
                    "uniqueID": 185465,
                    "ioValues": []
                },
                {
                    "atomType": "Input",
                    "name": "Resolution",
                    "x": 30,
                    "y": 133,
                    "uniqueID": 448894,
                    "ioValues": []
                },
                {
                    "atomType": "Code",
                    "name": "Code",
                    "x": 430,
                    "y": 178,
                    "uniqueID": 693637,
                    "ioValues": [],
                    "code": "function main(Input1, Input2){\n  return gear(2, 160, .25, GT2Tooth).interior();\n}\n\n\n//You can learn more about all of the available methods at https://jsxcad.js.org/app/UserGuide.html \n\n\n//The tooth profile of a 2GT belt\n\n//A support function to generate arcs\nfunction arc(x, xOffset, yOffset, radius, sign){\n    if(sign){\n        return yOffset + Math.sqrt(Math.pow(radius, 2) - Math.pow(x - xOffset, 2));\n    }\n    else{\n        return yOffset - Math.sqrt(Math.pow(radius, 2) - Math.pow(x - xOffset, 2));\n    }\n}\n\n//The actual tooth profile\nfunction GT2Tooth(i){\n    \n    //Transition points between sections\n    const T1 = .3;\n    const T2 = .41;\n    const T3 = .48;\n    \n    //The little fillet arc on the left\n    if(i>=T1 && i < T2){\n        return arc(i, .26, -.15, .15, true);\n    }\n    //The transition arc on the left\n    else if(i>=T2 && i<T3){\n        return arc(i, 1.4, 0, 1, false);\n    }\n    //The big arc in the middle\n    else if(i >= T3 && i < 1+(1-T3)){\n        return arc(i, 1, -.2, .555, false);\n    }\n    //The transition arc on the right\n    else if(i>= 1+(1-T3) && i<1+(1-T2)){\n        return arc(i, .6, 0, 1, false);\n    }\n    //The little fillet arc on the right\n    else if(i>=1+(1-T2) && i < 1+(1-T1)){\n        return arc(i, 1.74, -.15, .15, true);\n    }\n    //The flat parts on either side\n    else{\n        return 0;\n    }\n}\n\n\n//distanceToAngle take a distance and converts it to an angle for a circle of\n//the passed circumference\nfunction distanceToAngle(distance, C){\n    return 360*(distance/C);\n}\n\n\n//Gear is a function which takes arguments tooth spacing, number of teeth and \n//tooth. Tooth spacing is the length of each tooth, number of teeth is the number \n//of teeth in the gear, and tooth is a tooth profile function.\nfunction gear(toothSpacing, numberOfTeeth, stepSize, toothProfile){\n    \n    //Compute the Circumference of the sprocket and the radius of the sprocket\n    const C = toothSpacing*numberOfTeeth;\n    const R = C / (Math.PI*2);\n    \n    log(\"C: \" + C);\n    log(\"R: \" + R);\n    \n    points = [];\n    var radiusNow = R;\n    \n    var distance = 0;\n    while(distance <= C){\n       //Compute the radius at this point\n       radiusNow = R + toothProfile(distance%toothSpacing);\n       \n       //Generate the circle\n       points.push([radiusNow*cos(distanceToAngle(distance, C)), radiusNow*sin(distanceToAngle(distance, C)), 0]);\n       distance = distance + stepSize;\n    }\n    \n    \n    return Shape.fromOpenPath(points).close();\n}\n\n\n\n\nreturn main(Input1, Input2)"
                },
                {
                    "atomType": "Output",
                    "name": "Output",
                    "x": 1316,
                    "y": 164,
                    "ioValues": []
                }
            ],
            "allConnectors": [],
            "fileTypeVersion": 1
        }
    ],
    "circleSegmentSize": "0.4"
}