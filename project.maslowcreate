{
    "atomType": "Molecule",
    "name": "2GT Sprocket",
    "x": 0,
    "y": 0,
    "uniqueID": 869568,
    "ioValues": [
        {
            "name": "Number of teeth",
            "ioValue": 21
        }
    ],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Readme",
            "name": "README",
            "x": 0.2904564315352697,
            "y": 0.17901234567901234,
            "uniqueID": 362766,
            "ioValues": [],
            "readmeText": "This is the old version. Can probably be deleted.",
            "global": false
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.34190871369294606,
            "y": 0.23765432098765432,
            "uniqueID": 693637,
            "ioValues": [],
            "code": "//Inputs:[NumberOfTeeth, Resolution];\n\n\n//You can learn more about all of the available methods at https://jsxcad.js.org/app/UserGuide.html \n\n\n//A support function to generate arcs\nfunction arc(x, xOffset, yOffset, radius, sign){\n    if(sign){\n        return yOffset + Math.sqrt(Math.pow(radius, 2) - Math.pow(x - xOffset, 2));\n    }\n    else{\n        return yOffset - Math.sqrt(Math.pow(radius, 2) - Math.pow(x - xOffset, 2));\n    }\n}\n\n//The actual tooth profile\nfunction GT2Tooth(i){\n    \n    //Transition points between sections\n    const T1 = .3;\n    const T2 = .41;\n    const T3 = .48;\n    const TLD = .254;\n    \n    //The little fillet arc on the left\n    if(i>=T1 && i < T2){\n        return arc(i, .26, -.15, .15, true) - TLD;\n    }\n    //The transition arc on the left\n    else if(i>=T2 && i<T3){\n        return arc(i, 1.4, 0, 1, false) - TLD;\n    }\n    //The big arc in the middle\n    else if(i >= T3 && i < 1+(1-T3)){\n        return arc(i, 1, -.2, .555, false) - TLD;\n    }\n    //The transition arc on the right\n    else if(i>= 1+(1-T3) && i<1+(1-T2)){\n        return arc(i, .6, 0, 1, false) - TLD;\n    }\n    //The little fillet arc on the right\n    else if(i>=1+(1-T2) && i < 1+(1-T1)){\n        return arc(i, 1.74, -.15, .15, true) - TLD;\n    }\n    //The flat parts on either side\n    else{\n        return 0 - TLD;\n    }\n}\n\n\n//distanceToAngle take a distance and converts it to an angle for a circle of\n//the passed circumference\nfunction distanceToAngle(distance, C){\n    return 360*(distance/C);\n}\n\n\n//Gear is a function which takes arguments tooth spacing, number of teeth and \n//tooth. Tooth spacing is the length of each tooth, number of teeth is the number \n//of teeth in the gear, and tooth is a tooth profile function.\nfunction gear(toothSpacing, numberOfTeeth, stepSize, toothProfile){\n    \n    //Compute the Circumference of the sprocket and the radius of the sprocket\n    const C = toothSpacing*numberOfTeeth;\n    const R = C / (Math.PI*2);\n    \n    \n    const effectiveRadius = R - .254;\n    console.log(\"R: \" + effectiveRadius);\n    \n    points = [];\n    var radiusNow = R;\n    \n    var distance = 0;\n    while(distance < C){\n       //Compute the radius at this point\n       radiusNow = R + toothProfile(distance%toothSpacing);\n       //Generate the circle\n       points.push([radiusNow*Math.cos(Math.PI*distanceToAngle(distance, C)/180), radiusNow*Math.sin(Math.PI*distanceToAngle(distance, C)/180), 0]);\n       distance = distance + stepSize;\n    }\n    \n    return Shape.fromOpenPath(points).close().fill();\n}\n\n\nreturn gear(2, parseInt(NumberOfTeeth), parseFloat(Resolution), GT2Tooth);"
        },
        {
            "atomType": "Input",
            "name": "Number of teeth",
            "x": 0.013333333333333334,
            "y": 0.4789272030651341,
            "uniqueID": 185465,
            "ioValues": []
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.4,
            "y": 0.5401234567901234,
            "uniqueID": 404694,
            "ioValues": [
                {
                    "name": "NumberOfTeeth",
                    "ioValue": 21
                }
            ],
            "code": "//You can learn more about all of the available methods at https://jsxcad.js.org/app/UserGuide.html \n//Inputs:[NumberOfTeeth];\n\n\n//Ported to JSxCAD from https://www.thingiverse.com/thing:16627/files by @BarbourSmith\n\n// Parametric Pulley with multiple belt profiles\n// by droftarts January 2012\n\n// Based on pulleys by:\n// http://www.thingiverse.com/thing:11256 by me!\n// https://github.com/prusajr/PrusaMendel by Josef Prusa\n// http://www.thingiverse.com/thing:3104 by GilesBathgate\n// http://www.thingiverse.com/thing:2079 by nophead\n\n// dxf tooth data from http://oem.cadregister.com/asp/PPOW_Entry.asp?company=915217&elementID=07807803/METRIC/URETH/WV0025/F\n// pulley diameter checked and modeled from data at http://www.sdp-si.com/D265/HTML/D265T016.html\n\n// tune-able constants\n\n//  ********************************\n//  ** Scaling tooth for good fit **\n//  ********************************\n/*  To improve fit of belt to pulley, set the following constant. Decrease or increase by 0.1mm at a time. We are modelling the *BELT* tooth here, not the tooth on the pulley. Increasing the number will *decrease* the pulley tooth size. Increasing the tooth width will also scale proportionately the tooth depth, to maintain the shape of the tooth, and increase how far into the pulley the tooth is indented. Can be negative */\n\nconst additionalToothWidth = 0.2; //mm\n\n//  If you need more tooth depth than this provides, adjust the following constant. However, this will cause the shape of the tooth to change.\n\nconst additionalToothDepth = 0; //mm\n\n// Functions\n\nconst ToothSpaceingCurvefit = (teeth, b, c, d) => {\n  return ((c * Math.pow(teeth, d)) / (b + Math.pow(teeth, d))) * teeth;\n};\n\nconst ToothSpacing = (teeth, tooth_pitch, pitch_line_offset) =>\n  2 * ((teeth * tooth_pitch) / (3.14159265 * 2) - pitch_line_offset);\n\nconst ToothProfileToFace = (...points) =>\n  Shape.fromOpenPath(points).loop().fill();\n\nconst GT2_2mm = {\n  profile: ToothProfileToFace(\n    [0.747183, -0.5, 0],\n    [0.747183, 0, 0],\n    [0.647876, 0.037218, 0],\n    [0.598311, 0.130528, 0],\n    [0.578556, 0.238423, 0],\n    [0.547158, 0.343077, 0],\n    [0.504649, 0.443762, 0],\n    [0.451556, 0.53975, 0],\n    [0.358229, 0.636924, 0],\n    [0.2484, 0.707276, 0],\n    [0.127259, 0.750044, 0],\n    [0, 0.76447, 0],\n    [-0.127259, 0.750044, 0],\n    [-0.2484, 0.707276, 0],\n    [-0.358229, 0.636924, 0],\n    [-0.451556, 0.53975, 0],\n    [-0.504797, 0.443762, 0],\n    [-0.547291, 0.343077, 0],\n    [-0.578605, 0.238423, 0],\n    [-0.598311, 0.130528, 0],\n    [-0.648009, 0.037218, 0],\n    [-0.747183, 0, 0],\n    [-0.747183, -0.5, 0]\n  ),\n  diameter: (teeth) => ToothSpacing(teeth, 2, 0.254),\n  toothDepth: 0.764,\n  toothWidth: 1.494,\n};\n\n\n\nconst Pulley = (profile, teeth) => {\n  const pulley_OD = profile.diameter(teeth);\n  const tooth_depth = profile.toothDepth;\n  const tooth_width = profile.toothWidth;\n  const toothDistanceFromCentre = Math.sqrt(\n    Math.pow(pulley_OD / 2, 2) -\n      Math.pow((tooth_width + additionalToothWidth) / 2, 2)\n  );\n  const toothWidthScale = (tooth_width + additionalToothWidth) / tooth_width;\n  const toothDepthScale = (tooth_depth + additionalToothDepth) / tooth_depth;\n  var toothProfile = profile.profile;\n\n  console.log('pulley_OD: %f', pulley_OD);\n  console.log(profile);\n\n  const center = Arc(pulley_OD, pulley_OD);\n\n  //teeth - cut out of shaft\n\n  //Scale tooth up\n  toothProfile = toothProfile.scale(toothWidthScale, toothDepthScale);\n  //Translate it out to where it should be\n  toothProfile = toothProfile.move(0, -toothDistanceFromCentre, 0);\n\n  var teethArray = [];\n  for (let i = 0; i < teeth; i++) {\n    teethArray.push(toothProfile.rz(i / teeth));\n  }\n  const teethToCut = Group(...teethArray);\n\n  return center.cut(teethToCut);\n};\n\nreturn Pulley(GT2_2mm, NumberOfTeeth).clean();\n\n"
        },
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.9853587115666179,
            "y": 0.5,
            "uniqueID": 189452,
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": "source/869568/404694Code"
                }
            ]
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "number or geometry",
            "ap2Name": "NumberOfTeeth",
            "ap2Primary": false,
            "ap1ID": 185465,
            "ap2ID": 404694
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": 404694,
            "ap2ID": 189452
        }
    ],
    "fileTypeVersion": 1,
    "simplify": false,
    "unitsIndex": 0,
    "filetypeVersion": 1,
    "circleSegmentSize": "0.4"
}